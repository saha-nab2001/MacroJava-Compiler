//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TypeChecker<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public SymbolTable table = new SymbolTable();
   public Vector<String> exprList = new Vector<String> ();

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      table = (SymbolTable) argu;

      //Cycle detection using table.inheritanceGraph
      isCyclic();
      //Needs to be completed

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      table = (SymbolTable) argu;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A) "declaration");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, (A) "declaration");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String myClass = (String) n.f1.accept(this, (A) "declaration");
      n.f2.accept(this, argu);

      classDef C = table.classes.get(myClass);

      n.f3.accept(this, (A) C);
      n.f4.accept(this, (A) C);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String child = (String) n.f1.accept(this, (A) "declaration");
      n.f2.accept(this, argu);
      String parent = (String) n.f3.accept(this, (A) "declaration");
      if(!(table.classNames.contains(parent))) {
         System.out.println("Type error");
    	   System.exit(0);
      }
      classDef C = table.classes.get((String) child);

      n.f4.accept(this, argu);
      n.f5.accept(this, (A) C);
      n.f6.accept(this, (A) C);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A) "declaration");
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String methodName = (String) n.f2.accept(this, (A) "declaration");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      classDef C = (classDef) argu;
      method M = C.methods.get(methodName); 
      if(M == null)
      {
         System.out.println("Type error");
         System.exit(0);
      }
      n.f7.accept(this, (A) M);
      n.f8.accept(this, (A) M);
      n.f9.accept(this, argu);
      String retType = (String) n.f10.accept(this, (A) M);

      isCompatible(M.dataType, retType);

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A) "declaration");
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, (A) "declaration");
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      String typeName = (String) n.f0.accept(this, (A) "declaration");
      if(typeName.equals("int") || typeName.equals("int[]") || typeName.equals("boolean")) {
         _ret = (R) typeName;
      }
      else if(table.classes.containsKey(typeName)) {
         _ret = (R) typeName;
      }
      else
      {
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      //R _ret=null;
      R _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      //R _ret=null;
      R _ret= (R) "int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      //R _ret=null;
      R _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      //R _ret=null;
      R _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      //R _ret=null;
      R _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      //R _ret=null;
      R _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      //R _ret=null;
      R _ret = (R) n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String idType = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exprType = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      //Check for inheritance too.....
      isCompatible(idType, exprType);

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String idType = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      if(!idType.equals("int[]"))
      {
         System.out.println("Type error");
         System.exit(0);
      }

      String expr1Type = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String expr2Type = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      if(!expr1Type.equals("int") || !expr2Type.equals("int"))
      {
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String exprType = (String) n.f2.accept(this, argu);

      if(!exprType.equals("boolean"))
      {
         System.out.println("Type error");
         System.exit(0);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String exprtype = (String) n.f2.accept(this, argu);
      
      if(!exprtype.equals("boolean"))
      {
         System.out.println("Type error");
         System.exit(0);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String exprType = (String) n.f2.accept(this, argu);
      
      if(!exprType.equals("boolean"))
      {
         System.out.println("Type error");
         System.exit(0);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      String exprType = (String) n.f2.accept(this, argu);
      
      if(!exprType.equals("int"))
      {
         System.out.println("Type error");
         System.exit(0);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      //R _ret=null;
      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String expr1Type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr2Type = (String) n.f2.accept(this, argu);

      if(!expr1Type.equals("boolean") || !expr2Type.equals("boolean"))
      {
         System.out.println("Type error");
         System.exit(0);         
      }
      return (R) "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String expr1type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr2type = (String)n.f2.accept(this, argu);

      if(!expr1type.equals("boolean") || !expr2type.equals("boolean"))
      {
         System.out.println("Type error");
         System.exit(0);         
      }
      return (R) "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;

      String expr1Type = (String) n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      String expr2Type = (String) n.f2.accept(this, argu);

      if(!expr1Type.equals("int") || !expr2Type.equals("int")) {
         System.out.println("Type error");
         System.exit(0);         
      }
      return (R) "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String expr1Type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr2Type = (String)n.f2.accept(this, argu);

      if(!expr1Type.equals(expr2Type) || !(expr1Type.equals("boolean") || expr1Type.equals("int")))
      {
         System.out.println("Type error");
         System.exit(0);         
      }
      return (R) "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String expr1Type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr2Type = (String)n.f2.accept(this, argu);

      if(!expr1Type.equals("int") || !expr2Type.equals("int")) {
         System.out.println("Type error");
         System.exit(0);         
      }
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String expr1Type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr2Type = (String)n.f2.accept(this, argu);

      if(!expr1Type.equals("int") || !expr2Type.equals("int"))
      {
         System.out.println("Type error");
         System.exit(0);         
      }
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String expr1Type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr2Type = (String)n.f2.accept(this, argu);

      if(!expr1Type.equals("int") || !expr2Type.equals("int"))
      {
         System.out.println("Type error");
         System.exit(0);         
      }
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String expr1Type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr2Type = (String)n.f2.accept(this, argu);

      if(!expr1Type.equals("int") || !expr2Type.equals("int"))
      {
         System.out.println("Type error");
         System.exit(0);         
      }
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String expr1Type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr2Type = (String)n.f2.accept(this, argu);

      if(!expr1Type.equals("int[]") || !expr2Type.equals("int"))
      {
         System.out.println("Type error");
         System.exit(0);         
      }

      n.f3.accept(this, argu);
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String exprType = (String) n.f0.accept(this, argu);
      if(!exprType.equals("int[]"))
      {
         System.out.println("Type error");
         System.exit(0);         
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      
      String classID = (String) n.f0.accept(this, argu);

      String scope = null;
      if(argu.getClass().getSimpleName().equals("SymbolTable")) {
         scope = "mainClass";         
      }

      else if(argu.getClass().getSimpleName().equals("method")) {
         method temp = (method) argu;
         scope = temp.className;
      }

      n.f1.accept(this, argu);

      classDef C = (classDef) table.classes.get(classID);
      if(C == null) {
         System.out.println("Type error");
         System.exit(0);
      }

      String methodID = (String) n.f2.accept(this, (A) "declaration");

      method M = null;
      //String classID = ID;
      /*while(M == null) {

         classDef classST = table.classes.get(classID);
         M = (method) classST.methods.get(methodID);
         
         if(M != null && (classID.equals(scope) || !(M.accessType.equals("private"))))
         {
            //System.out.println(ID + ":" + classID + ":" + method.accessType);
            break;
         }

         if(!classID.equals(scope) && M.accessType.equals("private"))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         if(M == null)
         {
            if(table.inheritanceGraph.containsKey(classID)) {
               classID = table.inheritanceGraph.get(classID);
            }
            else {
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }*/

      while(M == null) {

         classDef classST = table.classes.get(classID);
         //M = (method) classST.methods.get(methodID);
         
         if(classST == null) {
            System.out.println("Type error");
            System.exit(0);
         } 

         M = (method) classST.methods.get(methodID);

         if(M != null)
         {
            if(M.accessType.equals("public"))
               break;

            if(M.accessType.equals("protected"))
               isCompatible(classID, scope);

            if(M.accessType.equals("private")) {

               if(classID.equals(scope))
                  break;

               else {
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
         }
         else
         {
            if(table.inheritanceGraph.containsKey(classID)) {
               classID = table.inheritanceGraph.get(classID);
            }
            else {
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }

      n.f3.accept(this, argu);
      Vector<String> V = (Vector<String>) n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      if(V == null) {
         if(M.params.size() > 0) {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      else if(V.size() != M.params.size()) {
         System.out.println("Type error");
         System.exit(0);
      }

      if(V != null) {
         for(int i = 0; i < V.size(); i++) {
            String actual = (String) V.get(i);
            String formal = (String) M.params.get(i).paramType;
            //System.out.println(formal + ":" + actual);
            isCompatible(formal, actual);
            /*while(!actual.equals(formal)) {

               classDef subclass = table.classes.get(actual);

               if(subclass == null || !(table.inheritanceGraph.containsKey(actual))) {
                  System.out.println(methodID + " - " + formal);
                  System.out.println("Type error");
                  System.exit(0);
               }
               else {
                  actual = table.inheritanceGraph.get(actual);
               }
            }*/
         }
      }

      return (R) M.dataType;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String expr1Type = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr2Type = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String expr3Type = (String) n.f4.accept(this, argu);

      if(!expr1Type.equals("boolean")) {
         System.out.println("Type error");
         System.exit(0);  
      }

      LCA(expr2Type, expr3Type);

      return (R) expr2Type;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      
      Vector<String> exprprev = (Vector<String>) exprList.clone();
      
      exprList.clear();
      exprList = new Vector<String>();
      String typename = (String) n.f0.accept(this, argu);
      exprList.add(typename);
      n.f1.accept(this, argu);
      
      Vector<String> exprresult = (Vector<String>) exprList.clone();
      exprList = (Vector<String>) exprprev.clone();

      return (R) exprresult;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String typeName = (String) n.f1.accept(this, argu);
      exprList.add(typeName);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      //R _ret=null;
      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret = (R) "int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret = (R) "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret = (R) "boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      if(argu.getClass().getSimpleName().equals("String") && "declaration".equals((String) argu))
      {
         _ret = n.f0.accept(this, argu);
         return _ret;
      }

      String ID = (String) n.f0.accept(this, argu);

      if(argu.getClass().getSimpleName().equals("method")) {

         method M = (method) argu;
         
         int len = M.params.size();
         for(int i = 0; i < len; i++) {
            String arg = M.params.get(i).paramName;
            if(arg.equals(ID)) {
               return (R) M.params.get(i).paramType;
            }
         }

         if(M.locals.get(ID) == null) {
            String classID = M.className;
            int flag = 1;

            while(flag == 1) {
               classDef C = table.classes.get(classID);
               if(C.fields.get(ID) != null) {
                  _ret = (R) C.fields.get(ID);
                  break;
               }
               else if(C.methods.get(ID) != null) {
                  _ret = (R) C.methods.get(ID);
                  break;
               }
               else {
                  //System.out.println(classID);
                  if(table.inheritanceGraph.containsKey(classID)) {
                     classID = table.inheritanceGraph.get(classID);
                  }
                  else {
                     flag = 0;
                  }
               }
            }
            if(flag == 0)
            {
               System.out.println("Type error");
               System.exit(0);  
            }
         }
         else
         {
            _ret = (R) M.locals.get(ID);
         }
      }

      if(argu.getClass().getSimpleName().equals("SymbolTable")) {
         if(table.classes.get(ID) == null)
         {
            System.out.println("Type error");
            System.exit(0);  
         }
         else
         {
            _ret = (R) table.classes.get(ID);
         }
      }

      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      method M = (method) argu;
      n.f0.accept(this, argu);
      return (R) M.className;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exprtype = (String) n.f3.accept(this, argu);
      if(!exprtype.equals("int")) {
         System.out.println("Type error");
         System.exit(0);  
      }
      n.f4.accept(this, argu);
      return (R) "int[]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String typename = (String) n.f1.accept(this, (A) "declaration");

      if(table.classes.get(typename) == null) {
         System.out.println("Type error");
         System.exit(0);
      }

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R) typename;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String typename = (String) n.f1.accept(this, argu);
      if(!typename.equals("boolean"))
      {
         System.out.println("Type error");
         System.exit(0);
      }
      return (R) "boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String typename = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R) typename;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   public void isCyclic() {
      for(Map.Entry entry : table.inheritanceGraph.entrySet()) {
         String child = (String) entry.getKey();
         String temp = child;
         while(temp != null) {
            temp = table.inheritanceGraph.get(temp);
            if(temp == null) 
               break;
            if(temp.equals(child)) {
               System.out.println("Type error");
               System.exit(0);
            }
         }
      }
   }

   public void isCompatible(String parent, String child) {

      if(parent.equals(child))
         return;

      if(child.equals("int") || child.equals("int[]") || child.equals("boolean")) {
         if(!child.equals(parent))
         {
            //System.out.println(idType + " " + exprType);
            System.out.println("Type error");
            System.exit(0);
         }
         else 
            return;
      }

      else if(!(table.classes.containsKey(parent)) || !(table.classes.containsKey(child))) {
         System.out.println("Type error");
         System.exit(0);
      }

      else {
         String type = child;
         boolean flag = false;
         if(type.equals(parent)) {
            flag = true;
         }
         while(table.inheritanceGraph.containsKey(type) && !(flag)) {
            if(type.equals(parent)) {
               flag = true;
            }
            type = table.inheritanceGraph.get(type);
         }
         if(type.equals(parent)) {
            flag = true;
         }
         if(!flag)
         {
            //System.out.println(idType + " " + exprType);
            System.out.println("Type error");
            System.exit(0);
         }
      }
   }

   public void LCA(String e1, String e2) {
      if(e1.equals(e2))
         return;

      else if(e2.equals("int") || e2.equals("int[]") || e2.equals("boolean")) {

         if(!e1.equals(e2)) {
            //System.out.println(idType + " " + exprType);
            System.out.println("Type error");
            System.exit(0);
         }
         else 
            return;
      }

      else {
         String s1 = e1;
         String s2 = e2;
         while(isEqual(s1, s2)) {
            if(s1 == null) s1 = e2;
            else s1 = table.inheritanceGraph.get(s1);
            
            if(s2 == null) s2 = e1;
            else s2 = table.inheritanceGraph.get(s2);
         }
         if(s1 == null) {
            System.out.println("Type error");
            System.exit(0);
         }
      }

   }

   public boolean isEqual(String s1, String s2) {
      if(s1 == null && s2 == null)
         return true;
      else if(s1 == null && s2 != null)
         return false;
      else if(s1 != null && s2 == null)
         return false;
      else 
         return s1.equals(s2);
   }

}
